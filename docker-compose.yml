version: '3.8'

volumes:
  consumer_service_db_pg:
  metrics_kafka:

services:
  consumer_service_db:
    image: postgres:latest
    restart: on-failure
    environment:
      POSTGRES_USER: cs
      POSTGRES_PASSWORD: password
      POSTGRES_DB: consumer_service_db
    volumes:
      - consumer_service_db_pg:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      monitoring_system:

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "127.0.0.1:2181:2181"
    networks:
      monitoring_system:

  kafka:
    depends_on:
      - zookeeper
    image: wurstmeister/kafka
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - metrics_kafka:/var/run/kafka
    networks:
      monitoring_system:
#  supplier_service:
#    container_name: supplier
#    restart: always
#    build: ./supplier_service
#    ports:
#      - "8081:8081"
#    depends_on:
#      - supplier_service_db
#    environment:
#      SPRING_DATASOURCE_URL: 'jdbc:postgresql://supplier_service_db:5432/supplier_service_db'
#      JAVA_OPTS: '-Xmx512m'
#    networks:
#      suppliercosumer:
#
#  consumer_service:
#    container_name: consumer
#    restart: always
#    build: ./consumer_service
#    ports:
#      - "8080:8080"
#    depends_on:
#      - supplier_service
#    environment:
#      SERVICE: 'http://supplier:8081'
#      JAVA_OPTS: '-Xmx512m'
#    networks:
#      suppliercosumer:
networks:
  monitoring_system: